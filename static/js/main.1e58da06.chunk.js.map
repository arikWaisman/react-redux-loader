{"version":3,"sources":["reducers/index.js","reducers/post_reducer.js","actions/types.js","store.js","actions/index.js","components/card_wrap.js","components/post_results.js","components/loaders/small_spinning_loader.js","components/inline_loader_example.js","components/app.js","components/loaders/other_loader.js","components/loaders/spinning_loader.js","components/loaders/index.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","post","state","arguments","length","undefined","action","type","Object","objectSpread","payload","id","userId","title","body","removePostData","loader","loaderReducer","middlewares","reduxThunk","logger","store","createStore","applyMiddleware","apply","getRemotePostData","dispatch","console","log","loaderActions","interfaceRequest","setTimeout","axios","get","then","res","data","interfaceComplete","catch","err","CardWrap","props","react_default","a","createElement","className","children","PostResults","_props$post","react","StyledSpinner","styled","svg","_templateObject","SmallSpinner","viewBox","cx","cy","r","fill","strokeWidth","inlineLoaders","inlineLoader1","small_spinning_loader","inlineLoader2","InlineLoader","renderResults","loaderKey","stateKey","_this","displayRegisteredInlineLoaders","calculate","e","value","showInlineLoader","setState","defineProperty","hideInlineLoader","_this2","this","onClick","Component","inlineLoadersDisplaySelector","keys","reduce","obj","inline","indexOf","connect","App","showLoader","hideSyncLoader","card_wrap","showSyncLoader","shouldTimeOut","timeOut","post_results","inline_loader_example","actions","loaderType","spinning_loader_templateObject","SpinnerBackground","div","_templateObject2","OTHER_LOADER","OtherLoader","SPINNING_LOADER","spinning_loader_StyledSpinner","Boolean","window","location","hostname","match","LoaderRoot","makeLoaderRoot","loaders","loaderContainer","document","prepend","ReactDOM","render","es","app","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e58da06.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nimport postReducer from './post_reducer';\nimport { loaderReducer } from 'react-redux-loader';\n\nconst rootReducer = combineReducers({\n  post: postReducer,\n  loader: loaderReducer,\n});\n\nexport default rootReducer;\n","import { POST_DATA_COMPLETE } from '../actions/types';\n\nconst removePostData = state => {\n  delete state.id;\n  delete state.userId;\n  delete state.title;\n  delete state.body;\n\n  return state;\n};\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case POST_DATA_COMPLETE:\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    // clean up post data when other loaders show\n    case 'react-redux-modal/SHOW_LOADER':\n    case 'react-redux-modal/INTERFACE_REQUEST':\n      return removePostData(state);\n\n    default:\n      return state;\n  }\n};\n","export const POST_DATA_REQUEST = 'POST_DATA_REQUEST';\nexport const POST_DATA_COMPLETE = 'POST_DATA_COMPLETE';\n","import { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst middlewares = [reduxThunk, logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import axios from 'axios';\nimport { POST_DATA_REQUEST, POST_DATA_COMPLETE } from './types';\nimport { actions as loaderActions } from 'react-redux-loader';\n\nexport const getRemotePostData = () => {\n  return dispatch => {\n    console.log(loaderActions);\n    dispatch(\n      loaderActions.interfaceRequest({\n        type: 'SPINNING_LOADER',\n      }),\n    );\n\n    dispatch({\n      type: POST_DATA_REQUEST,\n    });\n\n    // timeout to give loader a chance to display\n    setTimeout(() => {\n      axios\n        .get(`https://jsonplaceholder.typicode.com/posts/1`)\n        .then(res => {\n          dispatch({\n            type: POST_DATA_COMPLETE,\n            payload: res.data,\n          });\n          dispatch(loaderActions.interfaceComplete());\n        })\n        .catch(err => console.log);\n    }, 1500);\n  };\n};\n","import React from 'react';\n\nconst CardWrap = props => {\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">{props.children}</div>\n    </div>\n  );\n};\n\nexport default CardWrap;\n","import React, { Fragment } from 'react';\n\nconst PostResults = props => {\n  if (!props.post) {\n    return null;\n  }\n\n  const { title, body } = props.post;\n\n  if (!title || !body) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <h3>Fetched Post Data:</h3>\n      <h4>{title}</h4>\n      <p>{body}</p>\n    </Fragment>\n  );\n};\n\nexport default PostResults;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpinner = styled.svg`\n  animation: rotate 2s linear infinite;\n  top: 50%;\n  left: 50%;\n  transforum: translate(-50%, -50%);\n  width: 25px;\n  height: 25px;\n\n  & .path {\n    stroke: #5652bf;\n    stroke-linecap: round;\n    animation: dash 1.5s ease-in-out infinite;\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes dash {\n    0% {\n      stroke-dasharray: 1, 150;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -124;\n    }\n  }\n`;\n\n// loader actions get passed as props from loader factory\nconst SmallSpinner = props => (\n  <StyledSpinner viewBox=\"0 0 25 25\">\n    <circle\n      className=\"path\"\n      cx=\"12.5\"\n      cy=\"12.5\"\n      r=\"10\"\n      fill=\"none\"\n      strokeWidth=\"2\"\n    />\n  </StyledSpinner>\n);\n\nexport default SmallSpinner;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { actions as loaderActions } from 'react-redux-loader';\n\nimport SmallSpinner from './loaders/small_spinning_loader';\n\nconst inlineLoaders = {\n  inlineLoader1: <SmallSpinner />,\n  inlineLoader2: <SmallSpinner />,\n};\n\nclass InlineLoader extends Component {\n  state = {};\n\n  renderResults = (loaderKey, stateKey) => {\n    if (this.props.displayRegisteredInlineLoaders[loaderKey]) {\n      return inlineLoaders[loaderKey];\n    }\n\n    return this.state[stateKey] && this.state[stateKey];\n  };\n\n  calculate = (e, value, loaderKey, stateKey) => {\n    this.props.showInlineLoader(loaderKey);\n\n    this.setState({\n      [stateKey]: null,\n    });\n\n    return setTimeout(() => {\n      this.setState({\n        [stateKey]: 2 * value,\n      });\n      this.props.hideInlineLoader(loaderKey);\n    }, 6000);\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"inline-loader-wrap\">\n          <p>\n            2 * 2 is =\n            <span>{this.renderResults('inlineLoader1', 'example1')}</span>\n          </p>\n          <button\n            className=\"waves-effect waves-light btn\"\n            onClick={e => this.calculate(e, 2, 'inlineLoader1', 'example1')}\n          >\n            result\n          </button>\n        </div>\n        <div className=\"inline-loader-wrap\">\n          <p>\n            2 * 3 is =\n            <span>{this.renderResults('inlineLoader2', 'example2')}</span>\n          </p>\n          <button\n            className=\"waves-effect waves-light btn\"\n            onClick={e => this.calculate(e, 3, 'inlineLoader2', 'example2')}\n          >\n            result\n          </button>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst inlineLoadersDisplaySelector = state => {\n  return Object.keys(inlineLoaders).reduce((obj, loaderKey) => {\n    if (state.loader.inline.indexOf(loaderKey) > -1) {\n      return {\n        ...obj,\n        [loaderKey]: true,\n      };\n    }\n\n    return {\n      ...obj,\n      [loaderKey]: false,\n    };\n  }, {});\n};\n\nconst mapStateToProps = state => {\n  return {\n    displayRegisteredInlineLoaders: inlineLoadersDisplaySelector(state),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  loaderActions,\n)(InlineLoader);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { actions as loaderActions } from 'react-redux-loader';\n\nimport CardWrap from './card_wrap';\nimport PostResults from './post_results';\nimport InlineLoader from './inline_loader_example';\n\nclass App extends Component {\n  state = {\n    post: null,\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.props.loader.showLoader && (\n          <button\n            className=\"waves-effect waves-light btn red hide-loader\"\n            onClick={() => this.props.hideSyncLoader()}\n          >\n            Hide Loader\n          </button>\n        )}\n        <h1>React Redux Loaders</h1>\n\n        <CardWrap>\n          <h3>Global Synchronous Loaders</h3>\n          <div className=\"btn-wrap\">\n            <button\n              className=\"waves-effect waves-light btn\"\n              onClick={() => this.props.showSyncLoader()}\n            >\n              DEFAULT LOADER\n            </button>\n          </div>\n          <div className=\"btn-wrap\">\n            <button\n              className=\"waves-effect waves-light btn\"\n              onClick={() =>\n                this.props.showSyncLoader({ type: 'OTHER_LOADER' })\n              }\n            >\n              OTHER LOADER\n            </button>\n          </div>\n          <div className=\"btn-wrap\">\n            <button\n              className=\"waves-effect waves-light btn\"\n              onClick={() =>\n                this.props.showSyncLoader({\n                  type: 'OTHER_LOADER',\n                  shouldTimeOut: true,\n                  timeOut: 1000,\n                })\n              }\n            >\n              TIMED OUT LOADER\n            </button>\n          </div>\n        </CardWrap>\n        <CardWrap>\n          <h3>Global Asynchronous Loaders</h3>\n\n          <div className=\"btn-wrap\">\n            <button\n              className=\"waves-effect waves-light btn\"\n              onClick={this.props.getRemotePostData}\n            >\n              ASYNC LOADER - Get Remote Post Data\n            </button>\n          </div>\n          <PostResults post={this.props.post} />\n        </CardWrap>\n        <CardWrap>\n          <h3>Inline Loaders</h3>\n\n          <InlineLoader />\n        </CardWrap>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loader: state.loader,\n    post: state.post,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { ...actions, ...loaderActions },\n)(App);\n","import React from 'react';\nimport { connect } from '../../../node_modules/react-redux';\n\nconst OtherLoader = props => {\n  return (\n    <div>\n      Other loader that is connected to redux and registered from the inside\n      your project...\n      <br />\n      Loader type from redux store: {props.loaderType}\n    </div>\n  );\n};\nexport default connect(state => state.loader)(OtherLoader);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpinner = styled.svg`\n  position: relative;\n  animation: rotate 2s linear infinite;\n  top: 50%;\n  left: 50%;\n  transforum: translate(-50%, -50%);\n  width: 50px;\n  height: 50px;\n  z-index: 1001;\n\n  & .path {\n    stroke: #5652bf;\n    stroke-linecap: round;\n    animation: dash 1.5s ease-in-out infinite;\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes dash {\n    0% {\n      stroke-dasharray: 1, 150;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -124;\n    }\n  }\n`;\n\nconst SpinnerBackground = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.7);\n  z-index: 1000;\n`;\n\n// loader actions get passed as props from loader factory\nconst Spinner = props => (\n  <SpinnerBackground>\n    <StyledSpinner viewBox=\"0 0 50 50\">\n      <circle\n        className=\"path\"\n        cx=\"25\"\n        cy=\"25\"\n        r=\"20\"\n        fill=\"none\"\n        strokeWidth=\"4\"\n      />\n    </StyledSpinner>\n  </SpinnerBackground>\n);\n\nexport default Spinner;\n","import OtherLoader from './other_loader';\nimport Spinner from './spinning_loader';\n\nexport const OTHER_LOADER = OtherLoader;\nexport const SPINNING_LOADER = Spinner;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './components/app';\n\nimport * as loaders from './components/loaders';\n\nimport { makeLoaderRoot } from 'react-redux-loader';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nconst mountLoaderRoot = loaderContainer => {\n  document.body.prepend(loaderContainer);\n};\nconst LoaderRoot = makeLoaderRoot(store, loaders, mountLoaderRoot);\n\nconst Root = () => (\n  <Fragment>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    <LoaderRoot />\n  </Fragment>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}